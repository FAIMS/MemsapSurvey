import java.util.concurrent.Callable;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;
Boolean transectEnabled = false;

String tracklogStatus = "Tracklog is Stopped";
String tracklogState = "Stop";

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Internal GPS";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Enable Internal GPS";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("control/Control/refreshText") + ". You can change it in the Control tab.");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable External GPS";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "Enable External GPS";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("control/Control/refreshText") + ". You can change it in the Control tab.");
        } else {
            showToast("Please enable bluetooth.");
            this.isActionOff();
        }
        
    }
});

addActionBarItem("time_tracklog", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Time Tracklog";
    }
    actionOn() {
        stopTrack();
        showToast("Tracklog disabled.");
    }
    isActionOff() {
        tracklogState.equals("Time");
    }
    actionOffLabel() {
        "Enable Time Tracklog";
    }
    actionOff() {
        if(isInternalGPSOn() || isInternalGPSOn()) {
            startTimeTrack();
            showToast("Tracklog enabled. Tracklog time interval set to " + getFieldValue("control/Control/tracktimeText") + " seconds. You can change it in the Control tab.");    
        } else {
            showToast("GPS is not turned on.");
            this.isActionOff();
        }
        
    }
});

addActionBarItem("distance_tracklog", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Distance Tracklog";
    }
    actionOn() {
        stopTrack();
        showToast("Tracklog disabled.");
    }
    isActionOff() {
        tracklogState.equals("Distance");
    }
    actionOffLabel() {
        "Enable Distance Tracklog";
    }
    actionOff() {
        if(isInternalGPSOn() || isInternalGPSOn()) {
            startDistTrack();
        showToast("Tracklog enabled. Tracklog distance interval set to " + getFieldValue("control/Control/trackdistText") + " metres. You can change it in the Control tab.");
        } else {
            showToast("GPS is not turned on.");
            this.isActionOff();
        }
    }
});

makeLocalID() {
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
    fetchOne("drop view if exists identifierAsSpreadsheet;", null);
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from (select * from latestNonDeletedArchentIdentifiers order by attributename) group by uuid;", null);
}

makeLocalID();

showWarning("Transect Survey with Artefact recording Demo", "This module was created by the FAIMS team for the needs of the MEMSAP project led by Jessica Thompson of UQ. It was funded by Australian Research Council LIEF grant and is available for Demonstration purposes. You can customise the module yourself or we can help you. Contact info@fedarch.org for help. ");

onEvent("control", "show", "resetGlobals();");

onEvent("control/Start/newSurveyUnit", "delayclick", "newSurveyUnit();");
onEvent("control/Start/newPOI", "delayclick", "newPOI();");
onEvent("control/Start/newArtefact", "delayclick", "newArtefact();");
onEvent("control/Start/newSite", "delayclick", "newSite();");
onEvent("control/Start/finishSU", "click", "finishSurveyUnit();");
onEvent("control/Start/currentSurveyUnit", "click", "loadSurveyUnit();");
onEvent("control/Start/archentsList", "click", "showRecords();");
onEvent("control/Start", "load", "setFieldValue(\"control/Start/archentsList\",\"SUID\");showRecords();");
onEvent("control/Start", "show", "showRecords();updateCurrentTransect();");
onEvent("control/Start/listOfLast", "click", "loadRecord();");

onEvent("control/Control/startGPSButton", "click", "startGPS();");
onEvent("control/Control/stopGPSButton", "click", "stopGPSLogic();");

/*********************************** SEARCH ***********************************/
onEvent("control/Search"               , "show"  , "search();");
onEvent("control/Search/Entity_List"   , "click" , "loadEntity();");
onEvent("control/Search/Search_Button" , "click" , "search()");
onEvent("control/Search/Search_Term"   , "click" , "clearSearch()");
onEvent("control/Search/Entity_Types"  , "click" , "search()");

entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}",         "'Artefact', 'POI', 'Site', 'Survey Unit'"));
entityTypes.add(new NameValuePair("{Artefact}",    "'Artefact'                              "));
entityTypes.add(new NameValuePair("{POI}",         "'POI'                                   "));
entityTypes.add(new NameValuePair("{Site}",        "'Site'                                  "));
entityTypes.add(new NameValuePair("{Survey_Unit}", "'Survey Unit'                           "));
populateDropDown("control/Search/Entity_Types", entityTypes);

clearSearch(){
  setFieldValue("control/Search/Search_Term","");
}

search(){
  String tabgroup = "control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE '"+term+"'||'%'  "+
                       "                   AND ( aenttypename IN ("+type+")) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";

  populateCursorList(refEntityList, searchQuery, 25);
}

loadEntity() {
  loadEntity(false);
}
loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

loadEntityFrom(String entityID) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      String archEntName = result.get(0).get(0);
      String loadFunction = "load" + archEntName.replaceAll(" ", "") + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}
/************************** STUFF WHICH ISN'T SEARCH **************************/

showRecords() {
    type = getFieldValue("control/Start/archentsList");

    query  = "   SELECT uuid, response";
    query += "     FROM latestNonDeletedArchEntFormattedIdentifiers";
    query += "     JOIN latestnondeletedArchEnt USING (uuid)";
    query += "    WHERE aenttypename LIKE '%"+type+"%'";
    query += " ORDER BY aenttimestamp desc";

    fetchAll(query, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                populateCursorList(
                    "control/Start/listOfLast",
                    query + " limit ? offset ?",
                    5
                );
            } else {
                ArrayList none = new ArrayList();
                none.add("No entries found");
                populateList("control/Start/listOfLast", none);
            }
        }
    });
}

updateCurrentTransect() {
    if(transectEnabled) {
        fetchAll("SELECT uuid, response FROM latestNonDeletedArchEntFormattedIdentifiers WHERE uuid = "+survey_unit_id+"", new FetchCallback() {
            onFetch(result) {
                populateList("control/Start/currentSurveyUnit", result);
            }
        });
    } else {
        populateList("control/Start/currentSurveyUnit", new ArrayList());
        fetchOne("select group_concat(response) from " +
                                        "(select surveyUnit.uuid " +
                                        "from " +
                                        "(select uuid, relationshipid " +
                                        "from (select aenttypeid from aenttype where aenttypename = 'Survey Unit') " +
                                        "        join latestnondeletedarchent using (aenttypeid) " +
                                        "        join latestnondeletedaentreln using (uuid)) surveyUnit " +
                                        "join ((select aenttypeid from aenttype where aenttypename = 'Transect') " +
                                        "        join latestnondeletedarchent using (aenttypeid) " +
                                        "        join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
                                        "join (select uuid, measure " +
                                        "from (select aenttypeid from aenttype where aenttypename = 'Transect') " +
                                        "join latestnondeletedarchent using (aenttypeid) " +
                                        "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) " +
                                        "where attributename = 'State') state on (transect.uuid = state.uuid) " +
                                        "group by surveyUnit.uuid " +
                                        "having min(measure) != 'End') join latestNonDeletedArchEntFormattedIdentifiers using (uuid);", new FetchCallback() {
            onFetch(result) {
                unfinished = result.get(0);
                if(!isNull(unfinished)) showWarning("Warning", "The following Transects have not been finished: " +unfinished+". To finish, load the Transect below as this will make it the current Transect.");
            }
        });
    }
}

loadRecord() {
    if (getListItemValue() != ""  && !getListItemValue().equals("No entries found")) {
        if (getFieldValue("control/Start/archentsList").equals("Survey Unit")) {
            loadSurveyUnit();
        } else if (getFieldValue("control/Start/archentsList").equals("POI")) {
            loadPOI();
        } else if (getFieldValue("control/Start/archentsList").equals("Artefact")) {
            loadArtefact();
        } else if (getFieldValue("control/Start/archentsList").equals("Site")) {
            loadSite();
        }
    }
}

resetGlobals() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");
}

startGPS() {
    Object intext = getFieldValue("control/Control/internalExternalGPS");
    if(isNull(intext)) {
        showWarning("Warning", "Please choose whether you would like to connect to internal or external GPS.");
        return;
    }
    setGPSUpdateInterval(Integer.parseInt(getFieldValue("control/Control/refreshText")));
    showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("control/Control/refreshText") + ".");
    if(intext.equals("I")) { 
        if(isExternalGPSOn()) stopGPS();
        startInternalGPS();
    }
    if(intext.equals("E")) {
        if(isInternalGPSOn()) stopGPS();
        startExternalGPS();
    }
}

stopGPSLogic() {
    if(!isInternalGPSOn() && !isExternalGPSOn()) {
        showToast("GPS disabled.");
        stopGPS();    
    } else {
        showToast("GPS is not turned on.");
    }
}

list = new ArrayList();
list.add(new NameValuePair("{Survey_Unit}", "Survey Unit"));
list.add(new NameValuePair("{Site}", "Site"));
list.add(new NameValuePair("{POI}", "POI"));
list.add(new NameValuePair("{Artefact}", "Artefact"));
populateDropDown("control/Start/archentsList", list);

//Tracklog

onEvent("control/Control/tracktimeButton", "click", "startTimeTrack()");
onEvent("control/Control/trackdistButton", "click", "startDistTrack()");
onEvent("control/Control/trackOffButton", "click", "stopTrack()");

setFieldValue("control/Control/refreshText","10");
setFieldValue("control/Control/trackdistText", "20");
setFieldValue("control/Control/tracktimeText", "30");
setFieldValue("control/Control/internalExternalGPS","I");

numTracklogPoints = 0;
tracklogCurrentStatus = "";
numTransectPoints = 0;

startTimeTrack() {
    stopTrack();
    if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Time";
        showToast("Tracklog enabled. Tracklog time interval set to " + getFieldValue("control/Control/tracktimeText") + " seconds.");    
        startTrackingGPS("time", Integer.parseInt(getFieldValue("control/Control/tracktimeText")), "saveGPSTrack(\"\")");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }
}

startDistTrack() {
    stopTrack();
    if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Distance";
        showToast("Tracklog enabled. Tracklog distance interval set to " + getFieldValue("control/Control/trackdistText") + " metres.");
        startTrackingGPS("distance", Integer.parseInt(getFieldValue("control/Control/trackdistText")), "saveGPSTrack(\"\")");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }
}

stopTrack() {
    stopTrackingGPS();
    numTracklogPoints = 0;
    numTransectPoints = 0;
    tracklogState = "Stopped";
    showToast("Tracklog disabled.");
    updateTrackStatus();
}

updateTrackStatus() {
    if (tracklogState.equals("Time"))    
            tracklogStatus = "Tracklog Started - Time: "+getFieldValue("control/Control/tracktimeText")+"s";
    else if (tracklogState.equals("Distance"))
            tracklogStatus = "Tracklog Started - Distance: "+getFieldValue("control/Control/trackdistText")+"m";
    else
            tracklogStatus = "Tracklog is "+tracklogState;
    
    if (numTracklogPoints > 0)
        tracklogStatus += "\nNumber Tracklog Points collected: "+numTracklogPoints;
    if (numTransectPoints > 0)
        tracklogStatus += "\nNumber current transect Points collected: "+numTransectPoints;

    tracklogStatus += "\nCurrent GPS Estimated Accuracy: "+ getGPSEstimatedAccuracy();
    

    setFieldValue("control/Control/trackStatus", tracklogStatus);
    setFieldValue("Survey_Unit/Survey_Unit/trackStatus", tracklogStatus);
}


saveGPSTrack(String stateAppend) {
    fetchOne("select vocabname from vocabulary where vocabid = "+getFieldValue("user/usertab/Team"), new FetchCallback() {
        onFetch(teamQuery) {
            position = getGPSPosition();
            if (position == null) {
                tracklogState = "Bad GPS Fix";
                return;
            }
            numTracklogPoints++;
            
            List attributes = createAttributeList();
            
            attributes.add(createEntityAttribute("Longitude", null, null, "" + position.getLongitude(), null));
            attributes.add(createEntityAttribute("Latitude", null, null, "" + position.getLatitude(), null ));
            attributes.add(createEntityAttribute("Heading", null, null, "" + getGPSHeading(), null));
            attributes.add(createEntityAttribute("Accuracy", null, null, "" + getGPSEstimatedAccuracy(), null));
            String date = new java.text.SimpleDateFormat("d-MMM-yy HH:MM:ss z").format(new Date());
            attributes.add(createEntityAttribute("Timestamp", null, null, "" + date, null));
            attributes.add(createEntityAttribute("TracklogTeam", teamQuery.get(0), null, null, null));

            
            positionProj = getGPSPositionProjected();
            Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
            ArrayList l = new ArrayList();
            l.add(p);
            
            saveArchEnt(null, "Tracklog", l, attributes, new SaveCallback() {
                onSave(uuid, newRecord) {
                    if (transectEnabled) {
                        numTransectPoints++;
                        attributes.add(createEntityAttribute("SUID", null, null, getFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID"), null));
                        attributes.add(createEntityAttribute("Width", null, null, getFieldValue("Survey_Unit/Survey_Unit/Total_Transect_Width"), null));
                        Boolean end = false;
                        if(stateAppend.equals("End")) {
                            end = true;
                            transectEnabled = false;
                        }
                        if (!stateAppend.equals("")) {
                            attributes.add(createEntityAttribute("State", null, null, stateAppend, null));
                            stateAppend = "";
                        }

                        p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
                        l = new ArrayList();
                        l.add(p);
                        
                        saveArchEnt(null, "Transect", l, attributes, new SaveCallback() {
                            onSave(uuid, newRecord) {
                                transect_id = uuid;
                                Callable callback = new Callable() {
                                    call() {
                                        if(end) updateCurrentTransect();
                                    }
                                };
                                saveEntitiesToRel("TransectSUI", transect_id, survey_unit_id, callback);
                                
                            }
                        });
                    }
                    updateTrackStatus();
                }
            });
        }
    });
}

//Survey Unit Logic
onEvent("Survey_Unit", "show", "addSurveyUnitNavigation();");
onEvent("Survey_Unit/Survey_Unit/Return", "delayclick", "cancelTabGroup(\"Survey_Unit\", false);showTab(\"control/Start\");");
onEvent("Survey_Unit/Survey_Unit/Attach_Photo", "click", "attachPictureTo(\"Survey_Unit/Survey_Unit/Photo\")");

String survey_unit_id = null;

newSurveyUnit() {
    if (transectEnabled) {
        showWarning("Already tracking!", "You're already in a Transect! Loading it now.");
        loadSurveyUnitFrom(survey_unit_id);
        return;
    }
    position = getGPSPosition();
    if (position == null) {
        showWarning("Warning", "Your GPS is not initialized, you cannot create a Survey Unit until the GPS icon is blue.");
        return;
    }
    newTabGroup("Survey_Unit");
    survey_unit_id = null;
    numTransectPoints = 0;
    
    fetchOne("select datetime('now', 'localtime');", new FetchCallback() {
        onFetch(result) {
            setFieldValue("Survey_Unit/Survey_Unit/Timestamp", result.get(0));
        }
    });
    setFieldValue("Survey_Unit/Survey_Unit/Recorded_by", username);
    setFieldValue("Survey_Unit/Survey_Unit/Participants", getFieldValue("control/Start/TeamMember"));
    setFieldValue("Survey_Unit/Survey_Unit/Number_of_Walkers", getFieldValue("control/Start/Walker"));
    setFieldValue("Survey_Unit/Survey_Unit/Survey_Line", getFieldValue("control/Start/SurveyLine"));
    autoNumSurveyUnit();
}

loadSurveyUnit() {
    survey_unit_id = getListItemValue();
    loadSurveyUnitFrom(survey_unit_id);
}

loadSurveyUnitFrom(archentid) {    
    
    if (isNull(archentid)) {
        showToast("No Survey Unit selected");
        return;
    }
    showTabGroup("Survey_Unit", archentid, new FetchCallback() {
        onFetch(result) {
            survey_unit_id = archentid;
            fetchOne("select surveyUnit.uuid "+
            "from " +
            "(select uuid, relationshipid " +
            "from (select aenttypeid from aenttype where aenttypename = 'Survey Unit')  " +
            "        join latestnondeletedarchent using (aenttypeid) " +
            "        join latestnondeletedaentreln using (uuid)) surveyUnit  " +
            "join ((select aenttypeid from aenttype where aenttypename = 'Transect')  " +
            "        join latestnondeletedarchent using (aenttypeid) " +
            "        join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
            "join (select uuid, measure  " +
            "from (select aenttypeid from aenttype where aenttypename = 'Transect')  " +
            "join latestnondeletedarchent using (aenttypeid)  " +
            "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) " +
            "where attributename = 'State') state on (transect.uuid = state.uuid) " +
            "where surveyUnit.uuid = "+survey_unit_id +" "+
            "group by surveyUnit.uuid " +
            "having min(measure) != 'End' ", 
            new FetchCallback() {
                onFetch(result) {
                    if(isNull(result)) {
                        transectEnabled = false;
                    } else {
                        transectEnabled = true;
                    }
                }
            });
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+survey_unit_id+"' group by uuid having min(aenttimestamp)",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("Survey_Unit/Survey_Unit/Recorded_by", result.get(0));
                    }
                });
        
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+survey_unit_id+"' group by uuid having min(aenttimestamp);",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("Survey_Unit/Survey_Unit/Timestamp", result.get(0));
                    }
                });
            saveTabGroup("Survey_Unit", survey_unit_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    survey_unit_id = uuid;
                }
            }, true);
            updateTrackStatus();
        }
    });
    
}

saveSurveyUnit(Callable callback) {
    if (isNull(getFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID"))) {
        showWarning("Validation Error", "Cannot save Transect without Transect number");
        return;
    }
    
    saveTabGroup("Survey_Unit", survey_unit_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            survey_unit_id = uuid;
            if(callback != null) callback.call();
            
        }
    });
}

finishSurveyUnit() {
    if(!transectEnabled) {
        showWarning("Warning","There is no currently active Transect.");
        return;
    }
    position = getGPSPosition();
    if (position == null) {
        showWarning("Warning", "You have lost your GPS signal, please wait until the GPS icon is blue before you finish you Survey Unit.");
        return;
    }
    saveGPSTrack("End");
}

deleteSurveyUnit() {
    if (!isNull(survey_unit_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Transect!", "reallyDeleteSurveyUnit()", "doNotDelete()");
    } else {
        cancelTabGroup("Survey_Unit", true);
        transectEnabled = false;
    }
}

reallyDeleteSurveyUnit() {
    fetchAll("select transect.uuid " +
            "from " +
            "(select uuid, relationshipid " +
            "from (select aenttypeid from aenttype where aenttypename = 'Survey Unit')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) surveyUnit  " +
            "join ((select aenttypeid from aenttype where aenttypename = 'Transect')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
            "where surveyUnit.uuid = " + survey_unit_id + ";", new FetchCallback() {
                onFetch(transects) {
                    if(!isNull(transects)) {
                        for(transect:transects) {
                            deleteArchEnt(transect.get(0));
                        }
                    }
                }
            });
    deleteArchEnt(survey_unit_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Survey_Unit", false);
            transectEnabled = false;
            showTab("control/Start");        
        }
    });
}

addSurveyUnitNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {Survey_Unit}";
        }
        actionOn() {
            showTabGroup("Survey_Unit", survey_unit_id, new FetchCallback() {
                onFetch(result) {
                    survey_unit_id = null;
                    populateCameraPictureGallery("Survey_Unit/Survey_Unit/Photo", new ArrayList());        
                    autoNumSurveyUnit();
                }
            });
            
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {Survey_Unit}";
        }
        actionOn() {
            newSurveyUnit();
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {Survey_Unit}";
        }
        actionOn() {
            cancelTabGroup("Survey_Unit", false);
            showTab("control/Start");
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Survey_Unit}";
        }
        actionOn() {
            deleteSurveyUnit();
        }
    }, "danger");
}

loadSurveyUnitAttributes() {
    makeVocab("DropDown", "Survey_Unit/Survey_Unit/Landform", "Landform");
    makeVocab("DropDown", "Survey_Unit/Survey_Unit/Average_percentage_of_visibility_of_surface_of_the_landform_area", "Average percentage of visibility of surface of the landform area");
    makeVocab("DropDown", "Survey_Unit/Survey_Unit/Average_percentage_of_exposure_of_artefacts", "Average percentage of exposure of artefacts");
    makeVocab("DropDown", "Survey_Unit/Survey_Unit/Basic_geomorphic_summary", "Basic geomorphic summary");
    makeVocab("DropDown", "Survey_Unit/Survey_Unit/Cobble_distribution", "Cobble distribution");
    makeVocab("CheckBoxGroup", "Survey_Unit/Survey_Unit/Sediment_size", "Sediment size");
    makeVocab("RadioGroup", "Survey_Unit/Survey_Unit/Sediment_thickness", "Sediment thickness");
}

autoNumSurveyUnit() {
    fetchOne("select 'T' ||foo as foo " +
      "from (select max(cast(substr(measure,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'Survey Unit') " +
              "and attributename = 'Survey Unit ID');", new FetchCallback() {
        onFetch(result) {
            print(result);
            if(isNull(result.get(0))) {
                setFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID", "T1");
            } else {
                setFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID", result.get(0));    
            }
            transectEnabled = true;
            saveSurveyUnit(new Callable() {
                call() {
                    saveGPSTrack("Start");
                    saveTabGroup("Survey_Unit", survey_unit_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            survey_unit_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
    
}

//Point of Interest Logic
onEvent("POI", "show", "addPOINavigation();");

onEvent("POI/POI/Take_GPS", "click", "fillInGPS(\"POI/POI/\")");

onEvent("POI/Cobble", "show", "setFieldValue(\"POI/Cobble/POI_ID\", getFieldValue(\"POI/POI/POI_ID\"));");
onEvent("POI/Core", "show", "setFieldValue(\"POI/Core/POI_ID\", getFieldValue(\"POI/POI/POI_ID\"));");

onEvent("POI/POI/Next", "delayclick", "showPOITabs(false);");
onEvent("POI/POI/Attach_Photo", "click", "attachPictureTo(\"POI/POI/Photo\");");

onEvent("POI/Cobble/Return", "delayclick", "cancelTabGroup(\"POI\", false);showTab(\"control/Start\");");
onEvent("POI/Core/Return", "delayclick", "cancelTabGroup(\"POI\", false);showTab(\"control/Start\");");

String poi_id = null;

newPOI() {
    newTabGroup("POI");
    poi_id = null;
    setFieldValue("POI/POI/Recorded_by", username);
    fetchOne("select datetime('now', 'localtime');", new FetchCallback() {
        onFetch(result) {
            setFieldValue("POI/POI/Timestamp", result.get(0));
        }
    });
    fillInGPS("POI/POI/");
    autoNumPOI();
}

loadPOI() {
    poi_id = getListItemValue();
    loadPOIFrom(poi_id);
}

loadPOIFrom(archentid) {
    poi_id = archentid;
    if (isNull(poi_id)) {
        showToast("No POI selected");
        return;
    }
    showTabGroup("POI", poi_id, new FetchCallback() {
        onFetch(result) {
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+poi_id+"' group by uuid having min(aenttimestamp)",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("POI/POI/Recorded_by", result.get(0));
                    }
                });
            
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+poi_id+"' group by uuid having min(aenttimestamp);",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("POI/POI/Timestamp", result.get(0));
                    }
                });
            showPOITabs(true);
            saveTabGroup("POI", poi_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    poi_id = uuid;
                }
            }, true);
        }
    });
    
}

savePOI(Callable callback) {
    if (isNull(getFieldValue("POI/POI/POI_ID"))) {
        showWarning("Validation Error", "Cannot save Transect Object without Transect Object ID");
        return;
    }
    
    positionProj = getGPSPositionProjected();
    l = new ArrayList();
    if (positionProj != null) {
        Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
        l.add(p);
    } else {
        l = null;
    }
    saveTabGroup("POI", poi_id, l, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            poi_id = uuid;
            if(callback != null) callback.call();
        }
    });
}

deletePOI() {
    if (!isNull(poi_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Transect Object!", "reallyDeletePOI()", "doNotDelete()");
    } else {
        cancelTabGroup("POI", true);
        showTab("control/Start");
    }
}

reallyDeletePOI() {
    deleteArchEnt(poi_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("POI", false);
            showTab("control/Start");
        }    
    });
}

loadPOIAttributes() {
    makeVocab("RadioGroup", "POI/POI/Object", "Object");
    makeVocab("DropDown", "POI/POI/Raw_material", "Raw material");
    makeVocab("DropDown", "POI/POI/Crystal_Size", "Crystal Size");
    makeVocab("DropDown", "POI/POI/Abundance_of_Flaws", "Abundance of Flaws");
    makeVocab("DropDown", "POI/Cobble/Angularity", "Angularity");
    makeVocab("RadioGroup", "POI/Core/Completeness", "Completeness");
    makeVocab("DropDown", "POI/Core/Core_Weathering_stage", "Core Weathering stage");
    makeVocab("DropDown", "POI/Core/Flaking_on_Core_Perimeter", "Flaking on Core Perimeter");
    makeVocab("DropDown", "POI/Core/Outer_Surface_on_Whole_Core", "Outer Surface (Cortex) on Whole Core");
    makeVocab("DropDown", "POI/Core/Outer_Surface_on_Upper_Hemisphere", "Outer Surface (Cortex) on Upper Hemisphere");
    makeVocab("DropDown", "POI/Core/Outer_Surface_on_Lower_Hemisphere", "Outer Surface (Cortex) on Lower Hemisphere");
    makeVocab("DropDown", "POI/Core/Typology", "Core Typology");
}

addPOINavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {POI}";
        }
        actionOn() {
            showTabGroup("POI", poi_id, new FetchCallback() {
                onFetch(result) {
                    poi_id = null;
                    populateCameraPictureGallery("POI/POI/Photo", new ArrayList());
                    autoNumSurveyPOI();
                }
            });
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {POI}";
        }
        actionOn() {
            newPOI();
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {POI}";
        }
        actionOn() {
            cancelTabGroup("POI", false);
            showTab("control/Start");
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {POI}";
        }
        actionOn() {
            deletePOI();
        }
    }, "danger");
}

showPOITabs(Boolean onLoad) {
    fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("POI/POI/Object")+"';", new FetchCallback() {
        onFetch(name) {
            if (!isNull(name)) {
                String vocab = name.get(0);
                if (vocab.equals("{Cobble}")) {
                    cancelTab("POI/Core", false);
                    showTab("POI/Cobble");
                } else if (vocab.equals("{Core}")) {
                    cancelTab("POI/Cobble", false);
                    showTab("POI/Core");
                }
            } else {
                cancelTab("POI/Cobble", false);
                cancelTab("POI/Core", false);
                if(!onLoad) showToast("Please select a Object Type to continue");
            }
        }
    });
    
}

autoNumPOI() {
    fetchOne("select 'C' ||foo as foo " +
      "from (select max(cast(substr(measure,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'POI') " +
              "and attributename = 'POI ID');", new FetchCallback() {
        onFetch(result) {
            if(isNull(result.get(0))) {
                setFieldValue("POI/POI/POI_ID", "C1");
            } else {
                setFieldValue("POI/POI/POI_ID", result.get(0));    
            }
            savePOI(new Callable() {
                call() {
                    saveTabGroup("POI", poi_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            poi_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
}

//Artefact Logic
onEvent("Artefact", "show", "addArtefactNavigation();");

onEvent("Artefact/Flake", "show", "setFieldValue(\"Artefact/Flake/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");
onEvent("Artefact/Core", "show", "setFieldValue(\"Artefact/Core/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");
onEvent("Artefact/Shatter_Flakes", "show", "setFieldValue(\"Artefact/Shatter_Flakes/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");
onEvent("Artefact/Other", "show", "setFieldValue(\"Artefact/Other/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");

onEvent("Artefact/Artefact/Next", "delayclick", "showArtefactTabs(false);");

onEvent("Artefact/Flake/Attach_Photo", "click", "attachPictureTo(\"Artefact/Flake/Photo\")");
onEvent("Artefact/Core/Attach_Photo", "click", "attachPictureTo(\"Artefact/Core/Photo\")");
onEvent("Artefact/Shatter_Flakes/Attach_Photo", "click", "attachPictureTo(\"Artefact/Shatter_Flakes/Photo\")");
onEvent("Artefact/Other/Attach_Photo", "click", "attachPictureTo(\"Artefact/Other/Photo\")");

onEvent("Artefact/Flake/Return", "delayclick", "cancelTabGroup(\"Artefact\", false);showTab(\"control/Start\");");
onEvent("Artefact/Core/Return", "delayclick", "cancelTabGroup(\"Artefact\", false);showTab(\"control/Start\");");
onEvent("Artefact/Shatter_Flakes/Return", "delayclick", "cancelTabGroup(\"Artefact\", false);showTab(\"control/Start\");");
onEvent("Artefact/Other/Return", "delayclick", "cancelTabGroup(\"Artefact\", false);showTab(\"control/Start\");");

String artefact_id = null;

newArtefact() {
    newTabGroup("Artefact");
    artefact_id = null;
    autoNumArtefact();
}

loadArtefact() {
    artefact_id = getListItemValue();
    loadArtefactFrom(artefact_id);
}

loadArtefactFrom(archentid) {
    artefact_id = archentid;
    if (isNull(artefact_id)) {
        showToast("No Artefact selected");
        return;
    }

    showTabGroup("Artefact", artefact_id, new FetchCallback() {
        onFetch(result) {
            showArtefactTabs(true);
            saveTabGroup("Artefact", artefact_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    artefact_id = uuid;
                }
            }, true);
        }
    });
}

saveArtefact(Callable callback) {
    if (isNull(getFieldValue("Artefact/Artefact/Artefact_ID"))) {
        showWarning("Validation Error", "Cannot save Total Recording without Total Recording ID");
        return;
    }
    
    saveTabGroup("Artefact", artefact_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            artefact_id = uuid;
            if(callback != null) callback.call();
        }
    });
}

deleteArtefact() {
    if (!isNull(artefact_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Total Recording!", "reallyDeleteArtefact()", "doNotDelete()");
    } else {
        cancelTabGroup("Artefact", false);
        showTab("control/Start");
    }
}

reallyDeleteArtefact() {
    deleteArchEnt(artefact_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Artefact", false);
            showTab("control/Start");
        }    
    });   
}

addArtefactNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {Artefact}";
        }
        actionOn() {
            showTabGroup("Artefact", artefact_id, new FetchCallback() {
                onFetch(result) {
                    artefact_id = null;
                    populateCameraPictureGallery("Artefact/Flake/Photo", new ArrayList());
                    populateCameraPictureGallery("Artefact/Core/Photo", new ArrayList());
                    populateCameraPictureGallery("Artefact/Shatter_Flakes/Photo", new ArrayList());
                    populateCameraPictureGallery("Artefact/Other/Photo", new ArrayList());
                    autoNumArtefact();
                }
            });
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {Artefact}";
        }
        actionOn() {
            newArtefact();
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {Artefact}";
        }
        actionOn() {
            cancelTabGroup("Artefact", false);
            showTab("control/Start");
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Artefact}";
        }
        actionOn() {
            deleteArtefact();
        }
    }, "danger");
}

loadArtefactAttributes() {
    makeVocab("RadioGroup", "Artefact/Artefact/Technological_Component", "Technological Component");
    makeVocab("RadioGroup", "Artefact/Artefact/Thickness_Measurement_site", "Thickness Measurement site");
    makeVocab("DropDown", "Artefact/Artefact/Raw_material", "Raw material");
    makeVocab("RadioGroup", "Artefact/Artefact/Artefact_Weathering_stage", "Artefact Weathering stage");
    makeVocab("DropDown", "Artefact/Flake/Longitudinal_Portion", "Longitudinal Portion");
    makeVocab("DropDown", "Artefact/Flake/Transverse_Portion", "Transverse Portion");
    makeVocab("DropDown", "Artefact/Flake/Platform_Type", "Platform Type");
    makeVocab("DropDown", "Artefact/Flake/Platform_Cortex", "Platform Cortex");
    makeVocab("DropDown", "Artefact/Flake/Termination", "Termination");
    makeVocab("DropDown", "Artefact/Flake/Percentage_Cortical_Coverage", "Percentage Cortical Coverage");
    makeVocab("DropDown", "Artefact/Flake/Flake_Typology", "Flake Typology");
    makeVocab("DropDown", "Artefact/Flake/Scar_Orientation", "Scar Orientation");
    makeVocab("RadioGroup", "Artefact/Flake/Retouched", "Retouched");
    makeVocab("RadioGroup", "Artefact/Core/Completeness", "Completeness");
    makeVocab("DropDown", "Artefact/Core/Core_Weathering_stage", "Core Weathering stage");
    makeVocab("DropDown", "Artefact/Core/Flaking_on_Core_Perimeter", "Flaking on Core Perimeter");
    makeVocab("DropDown", "Artefact/Core/Outer_Surface_on_Whole_Core", "Outer Surface (Cortex) on Whole Core");
    makeVocab("DropDown", "Artefact/Core/Outer_Surface_on_Upper_Hemisphere", "Outer Surface (Cortex) on Upper Hemisphere");
    makeVocab("DropDown", "Artefact/Core/Outer_Surface_on_Lower_Hemisphere", "Outer Surface (Cortex) on Lower Hemisphere");
    makeVocab("DropDown", "Artefact/Core/Typology", "Core Typology");
    makeVocab("DropDown", "Artefact/Shatter_Flakes/Percentage_Cortical_Coverage", "Percentage Cortical Coverage");
    makeVocab("DropDown", "Artefact/Other/Other_Type", "Other Type");
}

showArtefactTabs(Boolean onLoad) {
    fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Artefact/Artefact/Technological_Component")+"';",
        new FetchCallback() {
            onFetch(name) {
                if (!isNull(name)) {
                    String vocab = name.get(0);
                    if (vocab.equals("{Flake}")) {
                        cancelTab("Artefact/Core", false);
                        cancelTab("Artefact/Shatter_Flakes", false);
                        cancelTab("Artefact/Other", false);
                        showTab("Artefact/Flake");
                    } else if (vocab.equals("{Core}")) {
                        cancelTab("Artefact/Flake", false);
                        cancelTab("Artefact/Shatter_Flakes", false);
                        cancelTab("Artefact/Other", false);
                        showTab("Artefact/Core");
                    } else if (vocab.equals("{Shatter_Flake_Piece}")) {
                        cancelTab("Artefact/Flake", false);
                        cancelTab("Artefact/Core", false);
                        cancelTab("Artefact/Other", false);
                        showTab("Artefact/Shatter_Flakes");
                    } else if (vocab.equals("{Other}")) {
                        cancelTab("Artefact/Flake", false);
                        cancelTab("Artefact/Core", false);
                        cancelTab("Artefact/Shatter_Flakes", false);
                        showTab("Artefact/Other");
                    }
                } else {
                    cancelTab("Artefact/Flake", false);
                    cancelTab("Artefact/Core", false);
                    cancelTab("Artefact/Shatter_Flakes", false);
                    cancelTab("Artefact/Other", false);
                    if(!onLoad) showToast("Please select a Technological Component to continue");
                }
            }
        });
}

autoNumArtefact() {
    fetchOne("select 'A' ||foo as foo " +
      "from (select max(cast(substr(measure,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'Artefact') " +
              "and attributename = 'Artefact ID');", new FetchCallback() {
        onFetch(result) {
            if(isNull(result.get(0))) {
                setFieldValue("Artefact/Artefact/Artefact_ID", "A1");
            } else {
                setFieldValue("Artefact/Artefact/Artefact_ID", result.get(0));    
            }
            saveArtefact(new Callable() {
                call() {
                    saveTabGroup("Artefact", artefact_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            artefact_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });    
}

//Site logic
onEvent("Site/Site/Take_GPS", "click", "fillInGPS(\"Site/Site/\")");
String site_id = null;

newSite() {
    newTabGroup("Site");
    site_id = null;
    setFieldValue("Site/Site/User", username);
    fetchOne("select datetime('now', 'localtime');", new FetchCallback() {
        onFetch(result) {
            setFieldValue("Site/Site/Timestamp", result.get(0));
        }
    });
    fillInGPS("Site/Site/");
    autoNumSite();
}

loadSite() {
    site_id = getListItemValue();
    loadSiteFrom(site_id);
}

loadSiteFrom(archentid) {
    site_id = archentid;
    if (isNull(site_id)) {
        showToast("No Site selected");
        return;
    }
    showTabGroup("Site", site_id, new FetchCallback() {
        onFetch(result) {
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+site_id+"' group by uuid having min(aenttimestamp)",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("Site/Site/User", result.get(0));
                    }
                });

            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+site_id+"' group by uuid having min(aenttimestamp);",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("Site/Site/Timestamp", result.get(0));
                    }
                });
            saveTabGroup("Site", site_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    site_id = uuid;
                }
            }, true);
        }
    });
    
}

saveSite(Callable callback) {
    if (isNull(getFieldValue("Site/Site/Site_ID"))) {
        showWarning("Validation Error", "Cannot save Transect Object without Transect Object ID");
        return;
    }
    
    positionProj = getGPSPositionProjected();
    l = new ArrayList();
    if (positionProj != null) {
        Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
        l.add(p);
    } else {
        l = null;
    }
    saveTabGroup("Site", site_id, l, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            site_id = uuid;
            if(callback != null) callback.call();
        }
    });
}

deleteSite() {
    if (!isNull(site_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Site!", "reallyDeleteSite()", "doNotDelete()");
    } else {
        cancelTabGroup("Site", true);
        showTab("control/Start");
    }
}

reallyDeleteSite() {
    deleteArchEnt(site_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Site", false);
            showTab("control/Start");
        }    
    });
}

loadSiteAttributes() {
    makeVocab("DropDown", "Site/Site/Site_Type", "Site Type");
    makeVocab("CheckBoxGroup", "Site/Site/Estimated_Age", "Estimated Age");
    makeVocab("CheckBoxGroup", "Site/Site/Materials_Present", "Materials Present");
    makeVocab("DropDown", "Site/Site/Site_Condition", "Site Condition");
    makeVocab("RadioGroup", "Site/Site/Recommend_for_further_investigation", "Recommend for further investigation");
}

addSiteNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate Site";
        }
        actionOn() {
            showTabGroup("Site", site_id, new FetchCallback() {
                onFetch(result) {
                    site_id = null;
                    populateCameraPictureGallery("Site/Site/Photo", new ArrayList());
                    autoNumSurveySite();
                }
            });
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New Site";
        }
        actionOn() {
            newSite();
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close Site";
        }
        actionOn() {
            cancelTabGroup("Site", false);
            showTab("control/Start");
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete Site";
        }
        actionOn() {
            deleteSite();
        }
    }, "danger");
}

autoNumSite() {
    fetchOne("select 'S' ||foo as foo " +
      "from (select max(cast(substr(measure,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'Site') " +
              "and attributename = 'Site ID');", new FetchCallback() {
        onFetch(result) {
            if(isNull(result.get(0))) {
                setFieldValue("Site/Site/Site_ID", "S1");
            } else {
                setFieldValue("Site/Site/Site_ID", result.get(0));    
            }
            saveSite(new Callable() {
                call() {
                    saveTabGroup("Site", site_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            site_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
}

/*** MISC ***/

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            callback.call();
        }
    });
}

makeVocab(String type, String path, String attrib) {
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result, true);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

doNotDelete() {
    showToast("Delete Cancelled.");
}

fillInGPS(String path) {
    Object position = getGPSPosition();    
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ) {
        Double latitude = position.getLatitude();
        Double longitude = position.getLongitude();
        Double northing = projPosition.getLatitude();
        Double easting = projPosition.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
        setFieldValue(path+"Northing", northing);
        setFieldValue(path+"Easting", easting);
    } else {
        showToast("GPS Not initialized");
    }
}

/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

DATA_ENTRY_LAYER = "Transect Layer";
DATA_ENTRY_LAYER_ID = 0;

onEvent("control/Map", "show", "drawTransects();loadMapSettings;");
onEvent("control/Map/centre", "click", "centreOnMe();");
onEvent("control/Map/saveSettings", "click", "saveMapSettings();"); 

drawTransects() {
     fetchOne("SELECT uuid, geospatialcolumn FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Transect'", new FetchCallback() {
        onFetch(result) {
            geoms = result;
        }
    });
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
}

initMap() {
    setMapZoom("control/Map/map", 15.0f);

    DATA_ENTRY_LAYER_ID = createCanvasLayer("control/Map/map", DATA_ENTRY_LAYER);

    //showBaseMap("control/Map/map", "Base Layer", "files/data/maps/RasterData.tif");

    isEntity = true;
    queryName = "Transects";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Transect'";
        
    addDatabaseLayerQuery("control/Map/map", queryName, querySQL);

    addTrackLogLayerQuery("control/Map/map", "track log entities", 
        "SELECT uuid, max(aenttimestamp) as aenttimestamp " + 
        " FROM latestNonDeletedArchent join aenttype using (aenttypeid) " +
        " where aenttypename = 'Tracklog';");

    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.RED, 30, Typeface.SANS_SERIF);

    showDatabaseLayer("control/Map/map", "Saved Data Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();

centreOnMe() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("GPS is not enabled.");
    } else {
        centerOnCurrentPosition("control/Map/map");
    }
}

loadMapSettings() {
    jsonFile = getAttachedFilePath("files/data/saved_config.json");

    if(new File(jsonFile).exists()) loadMapViewConfiguration("control/Map/map", jsonFile, "showToast(\"Loaded map configuration\")");
}

saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("control/Map/map", file, "showToast(\"Saved map configuration\")");
}

/*** USER ***/

populateListForUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result);        
        }
    });

    makeVocab("RadioGroup", "user/usertab/Team", "Team");

    fetchOne("select value from localSettings where key = 'Team';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue("user/usertab/Team", result.get(0));
            }
        }
    });
    fetchOne("select value from localSettings where key = 'User';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue("user/usertab/users", result.get(0));
            }
        }
    });
}

populateListForUsers();

String username = "";

login() {
    if(isNull(getFieldValue("user/usertab/Team")) || isNull(getFieldValue("user/usertab/users"))) {
        showWarning("Warning", "Please select a User and a Team before logging in.");
    } else {
        fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/usertab/users") + "';",
            new FetchCallback() {
                onFetch(result) {
                    User user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                    userid = result.get(0);
                    setUser(user);
                    username = result.get(1) + " " + result.get(2);
                    showTabGroup("control");

                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('User', '"+userid+"');", null);
                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Team', '"+getFieldValue("user/usertab/Team")+"');", null);
                }
            });
    }
}

onEvent("user/usertab/login", "click", "login()");


/*** SYNC ***/

onEvent("control/Control/SyncOn", "click", "startSync()");
onEvent("control/Control/SyncOff", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadSurveyUnitAttributes();
loadPOIAttributes();
loadArtefactAttributes();
loadSiteAttributes();
