/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

/*setSyncEnabled(true);
setFileSyncEnabled(true);*/

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view if exists identifierAsSpreadsheet;");
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from (select * from latestNonDeletedArchentIdentifiers order by attributename) group by uuid;");
}

makeLocalID();

onEvent("control/Start/newSurveyUnit", "delayclick", "newSurveyUnit()");
onEvent("control/Start/newPOI", "delayclick", "newPOI()");
onEvent("control/Start/newArtefact", "delayclick", "newArtefact()");
onEvent("control/Start/finishSU", "click", "finishSurveyUnit();");
onEvent("control/Start/currentSurveyUnit", "click", "loadSurveyUnit()");
onEvent("control/Start/archentsRadio", "click", "showRecords()");


onEvent("control/Start", "load", "setFieldValue(\"control/Start/listOfLastText\",\"5\");setFieldValue(\"control/Start/archentsRadio\",\"SUID\");showRecords()");
onEvent("control/Start", "show", "showRecords();updateCurrentTransect();");

onEvent("control/Start/listOfLast", "click", "loadRecord()");

showRecords(){
    type = getFieldValue("control/Start/archentsRadio");
    query = "select uuid, response from identifierAsSpreadsheet join latestnondeletedArchEnt using (uuid) join aenttype using (aenttypeid) where aenttypename like '%"+type+"%' order by aenttimestamp desc limit "+getFieldValue("control/Start/listOfLastText")+";";
    results = fetchAll(query);
    if (!isNull(results)){
        populateList("control/Start/listOfLast", results);
    } else {
        ArrayList none = new ArrayList();
        none.add("No entries found");
        populateList("control/Start/listOfLast", none);
    }
}

updateCurrentTransect(){
    if(transectEnabled){
        populateList("control/Start/currentSurveyUnit", fetchAll("select uuid, response from identifierAsSpreadsheet where uuid = "+survey_unit_id+""));
    } else {
        populateList("control/Start/currentSurveyUnit", new ArrayList());
        String unfinished = fetchOne("select group_concat(response) from " +
                                        "(select surveyUnit.uuid " +
                                        "from " +
                                        "(select uuid, relationshipid " +
                                        "from (select aenttypeid from aenttype where aenttypename = 'Survey Unit') " +
                                        "        join latestnondeletedarchent using (aenttypeid) " +
                                        "        join latestnondeletedaentreln using (uuid)) surveyUnit " +
                                        "join ((select aenttypeid from aenttype where aenttypename = 'Transect') " +
                                        "        join latestnondeletedarchent using (aenttypeid) " +
                                        "        join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
                                        "join (select uuid, freetext " +
                                        "from (select aenttypeid from aenttype where aenttypename = 'Transect') " +
                                        "join latestnondeletedarchent using (aenttypeid) " +
                                        "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) " +
                                        "where attributename = 'State') state on (transect.uuid = state.uuid) " +
                                        "group by surveyUnit.uuid " +
                                        "having min(freetext) != 'End') join identifierAsSpreadsheet using (uuid);").get(0);
        showWarning("Warning", "The following Transects have not been finished: " +unfinished);
    }
}

updateCurrentTransect(){
    populateList("control/Start/currentSurveyUnit", fetchAll("select uuid, response from identifierAsSpreadsheet where uuid = "+survey_unit_id+""));
}

loadRecord(){
    if (getListItemValue() != ""  && !getListItemValue().equals("No entries found")){
        if (getFieldValue("control/Start/archentsRadio").equals("Survey Unit")){
            loadSurveyUnit();
        } else if (getFieldValue("control/Start/archentsRadio").equals("POI")) {
            loadPOI();
        } else if (getFieldValue("control/Start/archentsRadio").equals("Artefact")) {
            loadArtefact();
        }
    }
}

//Control Logic

onEvent("control/Control/refreshGPSButton", "click", "startGPS()");
//onEvent("control/Control/refreshButton", "click", "setGPSUpdateInterval("+getFieldValue("control/Control/refreshText")+")");

startGPS(){
    Object intext = getFieldValue("control/Control/internalExternalGPS");
    if(isNull(intext)){
        showWarning("Warning", "Please choose whether you would like to connect to internal or external GPS.");
        return;
    }
    setGPSUpdateInterval(Integer.parseInt(getFieldValue("control/Control/refreshText")));
    if(intext.equals("I")) startInternalGPS();
    if(intext.equals("E")) startExternalGPS();
    showToast("Note, this can only be done once. To change the update interval, close the module and start again.");
}



//Tracklog


onEvent("control/Control/tracktimeButton", "click", "startTimeTrack()");
onEvent("control/Control/trackdistButton", "click", "startDistTrack()");
onEvent("control/Control/trackOffButton", "click", "stopTrack()");

setFieldValue("control/Control/refreshText","10");
setFieldValue("control/Control/trackdistText", "20");
setFieldValue("control/Control/tracktimeText", "30");
setFieldValue("control/Control/internalExternalGPS","I");

String tracklogStatus = "Tracklog is Stopped";
String tracklogState = "Stop";
numTracklogPoints = 0;
tracklogCurrentStatus = "";
numTransectPoints = 0;
stateAppend = "";

startTimeTrack(){
    stopTrack();
    tracklogState = "Time";
    startTrackingGPS("time",  Integer.parseInt(getFieldValue("control/Control/tracktimeText")), "saveGPSTrack()");
    updateTrackStatus();
}

startDistTrack(){
    stopTrack();
    tracklogState = "Distance";
    startTrackingGPS("distance", Integer.parseInt(getFieldValue("control/Control/trackdistText")), "saveGPSTrack()");
    updateTrackStatus();
}

stopTrack(){
    stopTrackingGPS();
    numTracklogPoints = 0;
    numTransectPoints = 0;
    tracklogState = "Stopped";
    updateTrackStatus();
}

updateTrackStatus(){
    if (tracklogState.equals("Time"))    
            tracklogStatus = "Tracklog Started - Time: "+getFieldValue("control/Control/tracktimeText")+"s";
    else if (tracklogState.equals("Distance"))
            tracklogStatus = "Tracklog Started - Distance: "+getFieldValue("control/Control/trackdistText")+"m";
    else
            tracklogStatus = "Tracklog is "+tracklogState;
    
    if (numTracklogPoints > 0)
        tracklogStatus += "\nNumber Tracklog Points collected: "+numTracklogPoints;
    if (numTransectPoints > 0)
        tracklogStatus += "\nNumber current transect Points collected: "+numTransectPoints;

    tracklogStatus += "\nCurrent GPS Estimated Accuracy: "+ getGPSEstimatedAccuracy();
    

    setFieldValue("control/Control/trackStatus", tracklogStatus);
    setFieldValue("Survey_Unit/Survey_Unit/trackStatus", tracklogStatus);
}
Boolean transectEnabled = false;

saveGPSTrack() {
    position = getGPSPosition();
    if (position == null) {
        tracklogState = "Bad GPS Fix";
        return;
    }
    numTracklogPoints++;
    
    List attributes = createAttributeList();
    
    attributes.add(createEntityAttribute("Longitude", null, null, "" + position.getLongitude(), null));
    attributes.add(createEntityAttribute("Latitude", null, null, "" + position.getLatitude(), null ));
    attributes.add(createEntityAttribute("Heading", null, null, "" + getGPSHeading(), null));
    attributes.add(createEntityAttribute("Accuracy", null, null, "" + getGPSEstimatedAccuracy(), null));
    String date = new java.text.SimpleDateFormat("d-MMM-yy HH:MM:ss z").format(new Date());
    attributes.add(createEntityAttribute("Timestamp", null, null, "" + date, null));
    teamQuery = fetchOne("select vocabname from vocabulary where vocabid = "+getFieldValue("user/usertab/Team"));
    attributes.add(createEntityAttribute("TracklogTeam", teamQuery.get(0), null, null, null));

    
    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);
    
    saveArchEnt(null, "Tracklog", l, attributes);

    if (transectEnabled){
        numTransectPoints++;
        attributes.add(createEntityAttribute("SUID", getFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID"), null, null, null));
        attributes.add(createEntityAttribute("Width", getFieldValue("Survey_Unit/Survey_Unit/Total_Transect_Width"), null, null, null));

        if (!stateAppend.equals("")){
            attributes.add(createEntityAttribute("State", stateAppend, null, null, null));

            stateAppend = "";
        }

        p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
        l = new ArrayList();
        l.add(p);
        
       transect_id = saveArchEnt(null, "Transect", l, attributes);
          

        saveEntitiesToRel("TransectSUI", transect_id, survey_unit_id); 
    }
    updateTrackStatus();
}



//Survey Unit Logic
onEvent("Survey_Unit/Survey_Unit/Update_and_Return", "delayclick", "saveSurveyUnit(\"cancelTabGroup(\\\"Survey_Unit\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("Survey_Unit/Survey_Unit/Delete", "delayclick", "deleteSurveyUnit()");
onEvent("Survey_Unit/Survey_Unit/Attach_Photo", "click", "attachPictureTo(\"Survey_Unit/Survey_Unit/Photo\")");


String survey_unit_id = null;
finishSurveyUnit(){
    if(!transectEnabled){
        showWarning("Warning","There is no currently active Transect.");
        return;
    }
    position = getGPSPosition();
    if (position == null) {
        showWarning("Warning", "You have lost your GPS signal, please wait until the GPS icon is blue before you finish you Survey Unit.");
        return;
    }
    saveSurveyUnit("stateAppend=\"End\";saveGPSTrack();transectEnabled=false;updateCurrentTransect();");
}
newSurveyUnit(){

    if (transectEnabled) {
        showWarning("Already tracking!", "You're already in a Transect! Loading it now.");
        loadSurveyUnitFrom(survey_unit_id);
        return;
    }
    position = getGPSPosition();
    if (position == null) {
        showWarning("Warning", "Your GPS is not initialized, you cannot create a Survey Unit until the GPS icon is blue.");
        return;
    }
    print(position);

    survey_unit_id = null;
    numTransectPoints = 0;
    stateAppend = "Start";
    newTabGroup("Survey_Unit");
    datetime = fetchOne("select datetime('now', 'localtime');");

    // TODO: CHECK IF WE STILL NEED THESE FIELDS
    // setFieldValue("Survey_Unit/Survey_Unit/Timestamp", datetime.get(0));
    // setFieldValue("Survey_Unit/Survey_Unit/Participants", getFieldValue("control/Start/TeamMember"));
    // setFieldValue("Survey_Unit/Survey_Unit/Number_of_Walkers", getFieldValue("control/Start/Walker"));
    autoNumSurveyUnit();
    transectEnabled = true;
    saveSurveyUnit("saveGPSTrack();");
}

loadSurveyUnit() {
    survey_unit_id = getListItemValue();
    loadSurveyUnitFrom(survey_unit_id);
}

loadSurveyUnitFrom(archentid) {

    print("loadSurveyUnitFrom: '"+archentid+"' ");
    Object finished = fetchOne("select surveyUnit.uuid "+
                                "from " +
                                "(select uuid, relationshipid " +
                                "from (select aenttypeid from aenttype where aenttypename = 'Survey Unit')  " +
                                "        join latestnondeletedarchent using (aenttypeid) " +
                                "        join latestnondeletedaentreln using (uuid)) surveyUnit  " +
                                "join ((select aenttypeid from aenttype where aenttypename = 'Transect')  " +
                                "        join latestnondeletedarchent using (aenttypeid) " +
                                "        join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
                                "join (select uuid, freetext  " +
                                "from (select aenttypeid from aenttype where aenttypename = 'Transect')  " +
                                "join latestnondeletedarchent using (aenttypeid)  " +
                                "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) " +
                                "where attributename = 'State') state on (transect.uuid = state.uuid) " +
                                "where surveyUnit.uuid = "+archentid +" "+
                                "group by surveyUnit.uuid " +
                                "having min(freetext) != 'End' ");

    if(isNull(finished)){
        transectEnabled = false;
    } else {
        transectEnabled = true;
    }
    survey_unit_id = archentid;
    if (isNull(survey_unit_id)) {
        showToast("No Survey Unit selected");
        return;
    }
    showTabGroup("Survey_Unit", survey_unit_id);
//     Object bar = fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+survey_unit_id+"' group by uuid having min(aenttimestamp);");
//     setFieldValue("Survey_Unit/Survey_Unit/Timestamp", bar.get(0));
}

saveSurveyUnit(String callback) {
    if (isNull(getFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID"))) {
        showWarning("Validation Error", "Cannot save Transect without Transect number");
        return;
    }
    
    if (!isNull(survey_unit_id)) {
        entity = fetchArchEnt(survey_unit_id);
    }
    saveTabGroup("Survey_Unit", survey_unit_id, null, null, "survey_unit_id = getLastSavedRecordId();" + callback);
}

deleteSurveyUnit(){
    if (!isNull(survey_unit_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Transect!", "reallyDeleteSurveyUnit()", "doNotDelete()");
    } else {
        cancelTabGroup("Survey_Unit", true);
        transectEnabled = false;
    }
}

reallyDeleteSurveyUnit() {
    deleteArchEnt(survey_unit_id);
    cancelTabGroup("Survey_Unit", false);
    transectEnabled = false;
}

loadSurveyUnitAttributes() {
    populateDropDown("Survey_Unit/Survey_Unit/Landform", makeVocab("Landform"));
    populateDropDown("Survey_Unit/Survey_Unit/Average_percentage_of_visibility_of_surface_of_the_landform_area", makeVocab("Average percentage of visibility of surface of the landform area"));
    populateDropDown("Survey_Unit/Survey_Unit/Average_percentage_of_exposure_of_artefacts", makeVocab("Average percentage of exposure of artefacts"));
    populateDropDown("Survey_Unit/Survey_Unit/Basic_geomorphic_summary", makeVocab("Basic geomorphic summary"));
    populateDropDown("Survey_Unit/Survey_Unit/Cobble_distribution", makeVocab("Cobble distribution"));
    populateRadioGroup("Survey_Unit/Survey_Unit/Sediment_size", makeVocab("Sediment size"));
}


//brian todo make sure localsettings working.
autoNumSurveyUnit() {
    Object counter = fetchOne("select 'T' ||foo as foo " +
      "from (select max(cast(substr(freetext,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'Survey Unit') " +
              "and attributename = 'Survey Unit ID');");
    if(isNull(counter.get(0))) {
        setFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID", "T1");
    } else {
        setFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID", counter.get(0));    
    }
}

//Point of Interest Logic

onEvent("POI", "show", "showPOITabs(false);");

onEvent("POI/POI/Take_GPS", "click", "fillInGPS(\"POI/POI/\")");

onEvent("POI/Cobble", "show", "setFieldValue(\"POI/Cobble/POI_ID\", getFieldValue(\"POI/POI/POI_ID\"));");
onEvent("POI/Core", "show", "setFieldValue(\"POI/Core/POI_ID\", getFieldValue(\"POI/POI/POI_ID\"));");

onEvent("POI/POI/Update_and_Next", "delayclick", "savePOI(\"showPOITabs(true);\")");
onEvent("POI/POI/Delete", "delayclick", "deletePOI()");
onEvent("POI/POI/Attach_Photo", "click", "attachPictureTo(\"POI/POI/Photo\")");

onEvent("POI/Cobble/Update_and_Return", "delayclick", "savePOI(\"cancelTabGroup(\\\"POI\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("POI/Cobble/Delete", "delayclick", "deletePOI()");

onEvent("POI/Core/Update_and_Return", "delayclick", "savePOI(\"cancelTabGroup(\\\"POI\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("POI/Core/Delete", "delayclick", "deletePOI()");

String poi_id = null;

newPOI(){
    poi_id = null;
    newTabGroup("POI");
    // TODO: Ask Adela if we still need these fields
    // setFieldValue("POI/POI/Recorded_By", username);
    // datetime = fetchOne("select datetime('now', 'localtime');");
    // setFieldValue("POI/POI/Timestamp", datetime.get(0));
    autoNumPOI();
}

loadPOI() {
    poi_id = getListItemValue();
    loadPOIFrom(poi_id);
}

loadPOIFrom(archentid) {
    poi_id = archentid;
    if (isNull(poi_id)) {
        showToast("No POI selected");
        return;
    }

    showTabGroup("POI", poi_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+poi_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("POI/POI/Recorded_By", foo.get(0));
    Object bar = fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+poi_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("POI/POI/Timestamp", bar.get(0));
}

savePOI(String callback) {
    if (isNull(getFieldValue("POI/POI/POI_ID"))) {
        showWarning("Validation Error", "Cannot save Transect Object without Transect Object ID");
        return;
    }
    
    if (!isNull(poi_id)) {
        entity = fetchArchEnt(poi_id);
    }
    saveTabGroup("POI", poi_id, null, null, "poi_id = getLastSavedRecordId();" + callback);
}

deletePOI(){
    if (!isNull(poi_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Transect Object!", "reallyDeletePOI()", "doNotDelete()");
    } else {
        cancelTabGroup("POI", true);
    }
}

reallyDeletePOI() {
    deleteArchEnt(poi_id);
    cancelTabGroup("POI", false);
}

loadPOIAttributes() {
    populateRadioGroup("POI/POI/Object", makeVocab("Object"));
    populateDropDown("POI/POI/Raw_material", makeVocab("Raw material"));
    populateDropDown("POI/POI/Crystal_Size", makeVocab("Crystal Size"));
    populateDropDown("POI/POI/Abundance_of_Flaws", makeVocab("Abundance of Flaws"));
    populateDropDown("POI/Cobble/Angularity", makeVocab("Angularity"));
    populateRadioGroup("POI/Core/Completeness", makeVocab("Completeness"));
    populateDropDown("POI/Core/Core_Weathering_stage", makeVocab("Core Weathering stage"));
    populateDropDown("POI/Core/Flaking_on_Core_Perimeter", makeVocab("Flaking on Core Perimeter"));
    populateDropDown("POI/Core/Outer_Surface_on_Whole_Core", makeVocab("Outer Surface (Cortex) on Whole Core"));
    populateDropDown("POI/Core/Outer_Surface_on_Upper_Hemisphere", makeVocab("Outer Surface (Cortex) on Upper Hemisphere"));
    populateDropDown("POI/Core/Outer_Surface_on_Lower_Hemisphere", makeVocab("Outer Surface (Cortex) on Lower Hemisphere"));
}

showPOITabs(Boolean onSave) {
    Object name = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("POI/POI/Object")+"';");
    if (!isNull(name)){
        String vocab = name.get(0);
        if (vocab.equals("{Cobble}")){
            cancelTab("POI/Core", false);
            showTab("POI/Cobble");
        } else if (vocab.equals("{Core}")){
            cancelTab("POI/Cobble", false);
            showTab("POI/Core");
        }
    } else {
        cancelTab("POI/Cobble", false);
        cancelTab("POI/Core", false);
        if(onSave) showToast("Please select a Object Type to continue");
    }
}

//TODO Brian, make sure this is team based.

autoNumPOI() {
    Object counter = fetchOne("select 'C' ||foo as foo " +
      "from (select max(cast(substr(freetext,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'POI') " +
              "and attributename = 'POI ID');");
    if(isNull(counter.get(0))) {
        setFieldValue("POI/POI/POI_ID", "C1");
    } else {
        setFieldValue("POI/POI/POI_ID", counter.get(0));    
    }
}

//Artefact Logic
onEvent("Artefact", "show", "showArtefactTabs(false);");

onEvent("Artefact/Flake", "show", "setFieldValue(\"Artefact/Flake/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");
onEvent("Artefact/Core", "show", "setFieldValue(\"Artefact/Core/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");
onEvent("Artefact/Shatter_Flakes", "show", "setFieldValue(\"Artefact/Shatter_Flakes/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");
onEvent("Artefact/Other", "show", "setFieldValue(\"Artefact/Other/Artefact_ID\", getFieldValue(\"Artefact/Artefact/Artefact_ID\"));");

onEvent("Artefact/Artefact/Update_and_Next", "delayclick", "saveArtefact(\"showArtefactTabs(true);\")");
onEvent("Artefact/Artefact/Delete", "delayclick", "deleteArtefact()");

onEvent("Artefact/Flake/Update_and_Return", "delayclick", "saveArtefact(\"cancelTabGroup(\\\"Artefact\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("Artefact/Flake/Delete", "delayclick", "deleteArtefact()");
onEvent("Artefact/Flake/Attach_Photo", "click", "attachPictureTo(\"Artefact/Flake/Photo\")");

onEvent("Artefact/Core/Update_and_Return", "delayclick", "saveArtefact(\"cancelTabGroup(\\\"Artefact\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("Artefact/Core/Delete", "delayclick", "deleteArtefact()");
onEvent("Artefact/Core/Attach_Photo", "click", "attachPictureTo(\"Artefact/Core/Photo\")");

onEvent("Artefact/Shatter_Flakes/Update_and_Return", "delayclick", "saveArtefact(\"cancelTabGroup(\\\"Artefact\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("Artefact/Shatter_Flakes/Delete", "delayclick", "deleteArtefact()");
onEvent("Artefact/Shatter_Flakes/Attach_Photo", "click", "attachPictureTo(\"Artefact/Shatter_Flakes/Photo\")");

onEvent("Artefact/Other/Update_and_Return", "delayclick", "saveArtefact(\"cancelTabGroup(\\\"Artefact\\\", false);showTab(\\\"control/Start\\\");\")");
onEvent("Artefact/Other/Delete", "delayclick", "deleteArtefact()");
onEvent("Artefact/Other/Attach_Photo", "click", "attachPictureTo(\"Artefact/Other/Photo\")");

String artefact_id = null;

newArtefact(){
    artefact_id = null;
    newTabGroup("Artefact");
    autoNumArtefact();
}

loadArtefact() {
    artefact_id = getListItemValue();
    loadArtefactFrom(artefact_id);
}

loadArtefactFrom(archentid) {
    artefact_id = archentid;
    if (isNull(artefact_id)) {
        showToast("No Artefact selected");
        return;
    }

    showTabGroup("Artefact", artefact_id);
}

saveArtefact(String callback) {
    if (isNull(getFieldValue("Artefact/Artefact/Artefact_ID"))) {
        showWarning("Validation Error", "Cannot save Total Recording without Total Recording ID");
        return;
    }
    
    if (!isNull(artefact_id)) {
        entity = fetchArchEnt(artefact_id);
    }
    saveTabGroup("Artefact", artefact_id, null, null, "artefact_id = getLastSavedRecordId();" + callback);
}

deleteArtefact(){
    if (!isNull(artefact_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Total Recording!", "reallyDeleteArtefact()", "doNotDelete()");
    } else {
        cancelTabGroup("Artefact", true);
    }
}

reallyDeleteArtefact() {
    deleteArchEnt(artefact_id);
    cancelTabGroup("Artefact", false);
}

loadArtefactAttributes() {
    populateRadioGroup("Artefact/Artefact/Technological_Component", makeVocab("Technological Component"));
    populateRadioGroup("Artefact/Artefact/Thickness_Measurement_site", makeVocab("Thickness Measurement site"));
    populateDropDown("Artefact/Artefact/Raw_material", makeVocab("Raw material"));
    populateRadioGroup("Artefact/Artefact/Artefact_Weathering_stage", makeVocab("Artefact Weathering stage"));
    populateDropDown("Artefact/Flake/Longitudinal_Portion", makeVocab("Longitudinal Portion"));
    populateDropDown("Artefact/Flake/Transverse_Portion", makeVocab("Transverse Portion"));
    populateDropDown("Artefact/Flake/Platform_Type", makeVocab("Platform Type"));
    populateDropDown("Artefact/Flake/Platform_Cortex", makeVocab("Platform Cortex"));
    populateDropDown("Artefact/Flake/Termination", makeVocab("Termination"));
    populateDropDown("Artefact/Flake/Percentage_Cortical_Coverage", makeVocab("Percentage Cortical Coverage"));
    populateDropDown("Artefact/Flake/Flake_Typology", makeVocab("Flake Typology"));
    populateDropDown("Artefact/Flake/Scar_Orientation", makeVocab("Scar Orientation"));
    populateRadioGroup("Artefact/Flake/Retouched", makeVocab("Retouched"));
    populateRadioGroup("Artefact/Core/Completeness", makeVocab("Completeness"));
    populateDropDown("Artefact/Core/Core_Weathering_stage", makeVocab("Core Weathering stage"));
    populateDropDown("Artefact/Core/Flaking_on_Core_Perimeter", makeVocab("Flaking on Core Perimeter"));
    populateDropDown("Artefact/Core/Outer_Surface_on_Whole_Core", makeVocab("Outer Surface (Cortex) on Whole Core"));
    populateDropDown("Artefact/Core/Outer_Surface_on_Upper_Hemisphere", makeVocab("Outer Surface (Cortex) on Upper Hemisphere"));
    populateDropDown("Artefact/Core/Outer_Surface_on_Lower_Hemisphere", makeVocab("Outer Surface (Cortex) on Lower Hemisphere"));
    populateDropDown("Artefact/Core/Typology", makeVocab("Core Typology"));
    populateDropDown("Artefact/Shatter_Flakes/Percentage_Cortical_Coverage", makeVocab("Percentage Cortical Coverage"));
    populateDropDown("Artefact/Other/Other_Type", makeVocab("Other Type"));
}

showArtefactTabs(Boolean onSave) {
    Object name = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Artefact/Artefact/Technological_Component")+"';");
    if (!isNull(name)){
        String vocab = name.get(0);
        if (vocab.equals("{aFlake}")){
            cancelTab("Artefact/Core", false);
            cancelTab("Artefact/Shatter_Flakes", false);
            cancelTab("Artefact/Other", false);
            showTab("Artefact/Flake");
        } else if (vocab.equals("{bCore}")){
            cancelTab("Artefact/Flake", false);
            cancelTab("Artefact/Shatter_Flakes", false);
            cancelTab("Artefact/Other", false);
            showTab("Artefact/Core");
        } else if (vocab.equals("{cShatter_Flake_Piece}")){
            cancelTab("Artefact/Flake", false);
            cancelTab("Artefact/Core", false);
            cancelTab("Artefact/Other", false);
            showTab("Artefact/Shatter_Flakes");
        } else if (vocab.equals("{zOther}")){
            cancelTab("Artefact/Flake", false);
            cancelTab("Artefact/Core", false);
            cancelTab("Artefact/Shatter_Flakes", false);
            showTab("Artefact/Other");
        }
    } else {
        cancelTab("Artefact/Flake", false);
        cancelTab("Artefact/Core", false);
        cancelTab("Artefact/Shatter_Flakes", false);
        cancelTab("Artefact/Other", false);
        if(onSave) showToast("Please select a Technological Component to continue");
    }
}

autoNumArtefact(){
    Object counter = fetchOne("select 'A' ||foo as foo " +
      "from (select max(cast(substr(freetext,2) as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'Artefact') " +
              "and attributename = 'Artefact ID');");
    if(isNull(counter.get(0))) {
        setFieldValue("Artefact/Artefact/Artefact_ID", "A1");
    } else {
        setFieldValue("Artefact/Artefact/Artefact_ID", counter.get(0));    
    }
    
}

/*** MISC ***/

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, e1verb);
    addReln(entity2, rel_id, e2verb);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

fillInGPS(String path){
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ){
        Double latitude = projPosition.getLatitude();
        Double longitude = projPosition.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
    } else {
        showToast("GPS Not initialized");
    }
}

/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

DATA_ENTRY_LAYER = "Transect Layer";
DATA_ENTRY_LAYER_ID = 0;

onEvent("control/Map", "show", "drawTransects()");
onEvent("control/Map/centre", "click", "centerOnCurrentPosition(\"control/Map/map\");"); 


drawTransects(){

    geoms = fetchOne("SELECT uuid, geospatialcolumn FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Transect'");
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);



}


initMap() {
    setMapZoom("control/Map/map", 15.0f);

    DATA_ENTRY_LAYER_ID = createCanvasLayer("control/Map/map", DATA_ENTRY_LAYER);

    //showBaseMap("control/Map/map", "Base Layer", "files/data/maps/BM1.tif");

    isEntity = true;
    queryName = "Transects";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Transect'";
        
    addDatabaseLayerQuery("control/Map/map", queryName, querySQL);

    addTrackLogLayerQuery("control/Map/map", "track log entities", 
        "SELECT uuid, max(aenttimestamp) as aenttimestamp " + 
        " FROM latestNonDeletedArchent join aenttype using (aenttypeid) " +
        " where aenttypename = 'Tracklog';");
    /*        
    addSelectQueryBuilder("Context/map/map", "Select entity by type", createQueryBuilder(
        "select uuid " + 
        "  from latestNonDeletedArchent " + 
        "  JOIN latestNonDeletedAentValue using (uuid) " + 
        "  join aenttype using (aenttypeid) " + 
        "  LEFT OUTER JOIN vocabulary using (vocabid, attributeid) " + 
        "  where lower(aenttypename) = lower(?) " + 
        "   group by uuid").addParameter("Type", "RemoteSensingContext"));*/
        
    //addLegacySelectQueryBuilder("Context/map/map", "Select geometry by id", "files/data/maps/sydney.sqlite", "Geology100_Sydney", 
    //    createLegacyQueryBuilder("Select PK_UID from Geology100_Sydney where PK_UID = ?").addParameter("ID", null));
                    
    // define database layer styles for points, lines, polygons and text
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.RED, 30, Typeface.SANS_SERIF);

    showDatabaseLayer("control/Map/map", "Saved Data Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();


/*** TRACKLOG ***/

/*

saveTimeGPSTrack() {
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("gps_type", "time", null, null, null));
    saveGPSTrack(attributes);
}

saveDistanceGPSTrack() {
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("gps_type", "distance", null, null, null));
    saveGPSTrack(attributes);
}

saveGPSTrack(List attributes) {
    position = getGPSPosition();
    if (position == null) return;

    //attributes.add(createEntityAttribute("gps_user", "" + user.getUserId(), null, null, null));
    attributes.add(createEntityAttribute("gps_timestamp", "" + getCurrentTime(), null, null, null));
    attributes.add(createEntityAttribute("gps_longitude", "" + position.getLongitude(), null, null, null));
    attributes.add(createEntityAttribute("gps_latitude", "" + position.getLatitude(), null, null, null));
    //attributes.add(createEntityAttribute("gps_heading", "" + getGPSHeading(), null, null, null));
    attributes.add(createEntityAttribute("gps_accuracy", "" + getGPSEstimatedAccuracy(), null, null, null));
    
    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);
    
    saveArchEnt(null, "gps_track", l, attributes);
}
*/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname ||' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateDropDown("user/usertab/users", getDefaultUsersList());
    populateRadioGroup("user/usertab/Team", makeVocab("Team"));

    Object localTeam = fetchOne("select value from localSettings where key = 'Team';");
    Object localUser = fetchOne("select value from localSettings where key = 'User';");

    if (!isNull(localTeam)){
        setFieldValue("user/usertab/Team", localTeam.get(0));
    }

    if (!isNull(localUser)){
        setFieldValue("user/usertab/users", localUser.get(0));
    }

}

populateListForUsers();

String username = "";
String device = "";
String teamCode = "";

login(){
    if(isNull(getFieldValue("user/usertab/Team")) || isNull(getFieldValue("user/usertab/users"))){
        showWarning("Warning", "Please select a User and an Team before logging in.");
    } else {
        Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/usertab/users") + "';");
        User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
        userid = userResult.get(0);
        setUser(user);
        username = userResult.get(1) + " " + userResult.get(2);
        showTabGroup("control");

        fetchOne("REPLACE INTO localSettings(key, value) VALUES('User', '"+userid+"');");
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Team', '"+getFieldValue("user/usertab/Team")+"');");

        teamCode = fetchOne("select vocabid, vocabname from vocabulary join localSettings on (value=vocabid) where key = 'Team' ").get(1);


    }

}

onEvent("user/usertab/login", "click", "login()");

/*** SYNC ***/

onEvent("control/Control/SyncOn", "click", "startSync()");
onEvent("control/Control/SyncOff", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadSurveyUnitAttributes();
loadPOIAttributes();
loadArtefactAttributes();